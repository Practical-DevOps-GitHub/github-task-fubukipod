name: GitHub Topic â€“ Full Auto-Setup

on:
  workflow_dispatch:

env:
  REPO: Practical-DevOps-GitHub/github-task-fubukipod
  OWNER: Practical-DevOps-GitHub
  COLLAB_USER: softservedata
  DEPLOY_KEY_TITLE: DEPLOY_KEY
  PAT: ${{ secrets.PAT }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

jobs:
  ##########################################
  # 1. Create CODEOWNERS & PR Template
  ##########################################
  init-files:
    name: Prepare CODEOWNERS & PR Template (PR-based)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.PAT }}
          fetch-depth: 0

      - name: Create files
        run: |
          mkdir -p .github
          echo "*   @${{ env.COLLAB_USER }}" > .github/CODEOWNERS
          cat <<'EOF' > .github/pull_request_template.md
          ## Describe your changes
          -

          ## Issue ticket number and link
          -

          ## Checklist before requesting a review
          - [ ] I have performed a self-review of my code
          - [ ] If it is a core feature, I have added thorough tests
          - [ ] Do we need to implement analytics?
          - [ ] Will this be part of a product update? If yes, describe briefly
          EOF

      - name: Commit to bot branch
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git checkout -B auto-setup-bot-templates
          git add .github/CODEOWNERS .github/pull_request_template.md
          git commit -m "Automated: Added CODEOWNERS & PR template" || echo "No changes"
          git push https://x-access-token:${{ env.PAT }}@github.com/${{ env.REPO }} auto-setup-bot-templates --force

      - name: Open Pull Request
        run: |
          curl -X POST \
            -H "Authorization: token ${{ env.PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO }}/pulls \
            -d '{"title":"Auto-Setup: CODEOWNERS & PR template","head":"auto-setup-bot-templates","base":"main"}'

  ##########################################
  # 2. Invite Collaborator
  ##########################################
  invite:
    name: Invite Collaborator
    runs-on: ubuntu-latest
    needs: init-files
    steps:
      - name: Send collaborator invite
        run: |
          curl -X PUT \
            -H "Authorization: token ${{ env.PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO }}/collaborators/${{ env.COLLAB_USER }} \
            -d '{"permission":"push"}'

  ##########################################
  # 3. Create Develop & Set as Default
  ##########################################
  develop:
    name: Ensure Develop Branch
    runs-on: ubuntu-latest
    needs: invite
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.PAT }}
          fetch-depth: 0

      - name: Create develop branch if missing
        run: |
          git remote set-url origin https://x-access-token:${{ env.PAT }}@github.com/${{ env.REPO }}
          git fetch origin main
          if ! git ls-remote --heads origin develop | grep develop; then
            git checkout -b develop origin/main
            git push origin develop --force
          fi

      - name: Set develop as default branch
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ env.PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO }} \
            -d '{"default_branch":"develop"}'

  ##########################################
  # 4. Apply Branch Protection Rules
  ##########################################
  protect:
    name: Apply Branch Protections
    runs-on: ubuntu-latest
    needs: develop
    steps:
      - name: Protect main (owner approval)
        run: |
          curl -X PUT \
            -H "Authorization: token ${{ env.PAT }}" \
            -H "Accept: application/vnd.github.luke-cage-preview+json" \
            https://api.github.com/repos/${{ env.REPO }}/branches/main/protection \
            -d '{"required_pull_request_reviews":{"required_approving_review_count":0,"require_code_owner_reviews":true},"enforce_admins":true,"restrictions":null,"required_status_checks":null}'

      - name: Protect develop (2 approvals)
        run: |
          curl -X PUT \
            -H "Authorization: token ${{ env.PAT }}" \
            -H "Accept: application/vnd.github.luke-cage-preview+json" \
            https://api.github.com/repos/${{ env.REPO }}/branches/develop/protection \
            -d '{"required_pull_request_reviews":{"required_approving_review_count":2},"enforce_admins":true,"restrictions":null,"required_status_checks":null}'

  ##########################################
  # 5. Add Deploy Key
  ##########################################
  deploy:
    name: Add Deploy Key
    runs-on: ubuntu-latest
    needs: protect
    steps:
      - name: Generate SSH key
        run: |
          ssh-keygen -t rsa -b 4096 -C "deploy_key" -f deploy_key -N ""
          echo "PUB_KEY=$(cat deploy_key.pub | tr -d '\n')" >> $GITHUB_ENV

      - name: Upload Deploy Key
        run: |
          curl -X POST \
            -H "Authorization: token ${{ env.PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO }}/keys \
            -d "{\"title\":\"${{ env.DEPLOY_KEY_TITLE }}\",\"key\":\"${PUB_KEY}\",\"read_only\":false}"

  ##########################################
  # 6. Create Project Board
  ##########################################
  project:
    name: Create Project Board
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Create project board
        run: |
          curl -X POST \
            -H "Authorization: token ${{ env.PAT }}" \
            -H "Accept: application/vnd.github.inertia-preview+json" \
            https://api.github.com/repos/${{ env.REPO }}/projects \
            -d '{"name":"Automated Project","body":"Board created by GitHub Action"}'

  ##########################################
  # 7. Discord PR Notification (with Issue Detection)
  ##########################################
  discord:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: project
    if: success()
    steps:
      - name: Extract Issue Ref
        id: issue
        run: |
          BODY="${{ github.event.pull_request.body }}"
          ISSUE=$(echo "$BODY" | grep -oE '#[0-9]+' | head -1 || echo "N/A")
          LINK="N/A"
          if [[ "$ISSUE" != "N/A" ]]; then LINK="https://github.com/${{ github.repository }}/issues/${ISSUE//#/}"; fi
          echo "issue_number=$ISSUE" >> $GITHUB_OUTPUT
          echo "issue_link=$LINK" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}
        with:
          args: |
            **New PR in github-task-fubukipod**
            Title: ${{ github.event.pull_request.title }}
            Author: ${{ github.actor }}
            PR: ${{ github.event.pull_request.html_url }}
            Issue: ${{ steps.issue.outputs.issue_number }}
            Issue Link: ${{ steps.issue.outputs.issue_link }}
